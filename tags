!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/d9090e1b/
$(TARGET)	Makefile	/^$(TARGET): $(OBJECTS)$/;"	t
%.o	Makefile	/^%.o : %.c$/;"	t
ARRAY_H_BW48JZSK	array.h	/^#define ARRAY_H_BW48JZSK$/;"	d
Array	datatypes.h	/^struct Array {$/;"	s
Array	datatypes.h	/^typedef struct Array Array;$/;"	t	typeref:struct:Array
ArrayEnsure	array.c	/^void ArrayEnsure(GC * gc, Array * array, uint32_t capacity) {$/;"	f	typeref:typename:void
ArrayGet	array.c	/^Value ArrayGet(Array * array, uint32_t index) {$/;"	f	typeref:typename:Value
ArrayInit	array.c	/^void ArrayInit(GC * gc, Array * array, uint32_t capacity) {$/;"	f	typeref:typename:void
ArrayNew	array.c	/^Array * ArrayNew(GC * gc, uint32_t capacity) {$/;"	f	typeref:typename:Array *
ArrayPeek	array.c	/^Value ArrayPeek(Array * array) {$/;"	f	typeref:typename:Value
ArrayPop	array.c	/^Value ArrayPop(Array * array) {$/;"	f	typeref:typename:Value
ArrayPush	array.c	/^void ArrayPush(GC * gc, Array * array, Value x) {$/;"	f	typeref:typename:void
ArraySet	array.c	/^int ArraySet(Array * array, uint32_t index, Value x) {$/;"	f	typeref:typename:int
BUFFER_H_OEA9T4DJ	buffer.h	/^#define BUFFER_H_OEA9T4DJ$/;"	d
Boolean	datatypes.h	/^typedef uint8_t Boolean;$/;"	t	typeref:typename:uint8_t
Buffer	datatypes.h	/^struct Buffer {$/;"	s
Buffer	datatypes.h	/^typedef struct Buffer Buffer;$/;"	t	typeref:struct:Buffer
BufferAppendData	buffer.c	/^void BufferAppendData(GC * gc, Buffer * buffer, uint8_t * string, uint32_t length) {$/;"	f	typeref:typename:void
BufferDefine	buffer.h	/^#define BufferDefine(/;"	d
BufferEnsure	buffer.c	/^void BufferEnsure(GC * gc, Buffer * buffer, uint32_t capacity) {$/;"	f	typeref:typename:void
BufferGet	buffer.c	/^int32_t BufferGet(Buffer * buffer, uint32_t index) {$/;"	f	typeref:typename:int32_t
BufferInit	buffer.c	/^void BufferInit(GC * gc, Buffer * buffer, uint32_t capacity) {$/;"	f	typeref:typename:void
BufferNew	buffer.c	/^Buffer * BufferNew(GC * gc, uint32_t capacity) {$/;"	f	typeref:typename:Buffer *
BufferPush	buffer.c	/^void BufferPush(GC * gc, Buffer * buffer, uint8_t c) {$/;"	f	typeref:typename:void
BufferToString	buffer.c	/^uint8_t * BufferToString(GC * gc, Buffer * buffer) {$/;"	f	typeref:typename:uint8_t *
CError	compile.c	/^#define CError(/;"	d	file:
CFLAGS	Makefile	/^CFLAGS=-std=c99 -Wall -Wextra -m32 -g$/;"	m
CFunction	datatypes.h	/^typedef Value (*CFunction)(VM * vm);$/;"	t	typeref:typename:Value (*)(VM * vm)
COMPILE_H_9VXF71HY	compile.h	/^#define COMPILE_H_9VXF71HY$/;"	d
CompileAddition	compile.c	/^static Slot CompileAddition(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileArray	compile.c	/^static Slot CompileArray(Compiler * c, FormOptions opts, Array * array) {$/;"	f	typeref:typename:Slot	file:
CompileAssign	compile.c	/^static Slot CompileAssign(Compiler * c, FormOptions opts, Value left, Value right) {$/;"	f	typeref:typename:Slot	file:
CompileBlock	compile.c	/^static Slot CompileBlock(Compiler * c, FormOptions opts, Array * form, uint32_t startIndex) {$/;"	f	typeref:typename:Slot	file:
CompileDict	compile.c	/^static Slot CompileDict(Compiler * c, FormOptions opts, Dictionary * dict) {$/;"	f	typeref:typename:Slot	file:
CompileDivision	compile.c	/^static Slot CompileDivision(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileDo	compile.c	/^static Slot CompileDo(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileForm	compile.c	/^static Slot CompileForm(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileFunction	compile.c	/^static Slot CompileFunction(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileIf	compile.c	/^static Slot CompileIf(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileLiteral	compile.c	/^static Slot CompileLiteral(Compiler * c, FormOptions opts, Value x) {$/;"	f	typeref:typename:Slot	file:
CompileMultiplication	compile.c	/^static Slot CompileMultiplication(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileNonReferenceType	compile.c	/^static Slot CompileNonReferenceType(Compiler * c, FormOptions opts, Value x) {$/;"	f	typeref:typename:Slot	file:
CompileOperator	compile.c	/^static Slot CompileOperator(Compiler * c, FormOptions opts, Array * form,$/;"	f	typeref:typename:Slot	file:
CompileQuote	compile.c	/^static Slot CompileQuote(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileSet	compile.c	/^static Slot CompileSet(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileSubtraction	compile.c	/^static Slot CompileSubtraction(Compiler * c, FormOptions opts, Array * form) {$/;"	f	typeref:typename:Slot	file:
CompileSymbol	compile.c	/^static Slot CompileSymbol(Compiler * c, FormOptions opts, Value sym) {$/;"	f	typeref:typename:Slot	file:
CompileValue	compile.c	/^static Slot CompileValue(Compiler * c, FormOptions opts, Value x) {$/;"	f	typeref:typename:Slot	file:
Compiler	datatypes.h	/^struct Compiler {$/;"	s
Compiler	datatypes.h	/^typedef struct Compiler Compiler;$/;"	t	typeref:struct:Compiler
CompilerAddGlobal	compile.c	/^void CompilerAddGlobal(Compiler * c, const char * name, Value x) {$/;"	f	typeref:typename:void
CompilerAddLiteral	compile.c	/^static uint16_t CompilerAddLiteral(Compiler * c, Scope * scope, Value x) {$/;"	f	typeref:typename:uint16_t	file:
CompilerCompile	compile.c	/^Func * CompilerCompile(Compiler * c, Value form) {$/;"	f	typeref:typename:Func *
CompilerDeclareSymbol	compile.c	/^static uint16_t CompilerDeclareSymbol(Compiler * c, Scope * scope, Value sym) {$/;"	f	typeref:typename:uint16_t	file:
CompilerDropSlot	compile.c	/^static void CompilerDropSlot(Compiler * c, Scope * scope, Slot slot) {$/;"	f	typeref:typename:void	file:
CompilerFreeLocal	compile.c	/^static void CompilerFreeLocal(Compiler * c, Scope * scope, uint16_t slot) {$/;"	f	typeref:typename:void	file:
CompilerGC	compile.c	/^#define CompilerGC(/;"	d	file:
CompilerGenFuncDef	compile.c	/^static FuncDef * CompilerGenFuncDef(Compiler * c, uint32_t lastNBytes, uint32_t arity) {$/;"	f	typeref:typename:FuncDef *	file:
CompilerGetLocal	compile.c	/^static uint16_t CompilerGetLocal(Compiler * c, Scope * scope) {$/;"	f	typeref:typename:uint16_t	file:
CompilerInit	compile.c	/^void CompilerInit(Compiler * c, VM * vm) {$/;"	f	typeref:typename:void
CompilerPopScope	compile.c	/^static void CompilerPopScope(Compiler * c) {$/;"	f	typeref:typename:void	file:
CompilerPushScope	compile.c	/^static Scope * CompilerPushScope(Compiler * c, int sameFunction) {$/;"	f	typeref:typename:Scope *	file:
CompilerReturnSlot	compile.c	/^static void CompilerReturnSlot(Compiler * c, Slot slot) {$/;"	f	typeref:typename:void	file:
CompilerTrackerFree	compile.c	/^static void CompilerTrackerFree(Compiler * c, Scope * scope, SlotTracker * tracker, int writeToB/;"	f	typeref:typename:void	file:
CompilerTrackerInit	compile.c	/^static void CompilerTrackerInit(Compiler * c, SlotTracker * tracker) {$/;"	f	typeref:typename:void	file:
CompilerTrackerPush	compile.c	/^static void CompilerTrackerPush(Compiler * c, SlotTracker * tracker, Slot slot) {$/;"	f	typeref:typename:void	file:
DATATYPES_H_PJJ035NT	datatypes.h	/^#define DATATYPES_H_PJJ035NT$/;"	d
DICT_H_YN2BKHUQ	dict.h	/^#define DICT_H_YN2BKHUQ$/;"	d
DO_MULTI_MATH	vm.c	/^			#define DO_MULTI_MATH(/;"	d	file:
DictBucket	datatypes.h	/^struct DictBucket {$/;"	s
DictBucket	datatypes.h	/^typedef struct DictBucket DictBucket;$/;"	t	typeref:struct:DictBucket
DictFind	dict.c	/^static DictBucket * DictFind(Dictionary * dict, Value * key, DictBucket ** prev) {$/;"	f	typeref:typename:DictBucket *	file:
DictGet	dict.c	/^Value DictGet(Dictionary * dict, Value * key) {$/;"	f	typeref:typename:Value
DictInit	dict.c	/^void DictInit(GC * gc, Dictionary * dict, uint32_t capacity) {$/;"	f	typeref:typename:void
DictIterate	dict.c	/^void DictIterate(Dictionary * dict, DictionaryIterator * iterator) {$/;"	f	typeref:typename:void
DictIterateNext	dict.c	/^int DictIterateNext(DictionaryIterator * iterator, DictBucket ** bucket) {$/;"	f	typeref:typename:int
DictNew	dict.c	/^Dictionary * DictNew(GC * gc, uint32_t capacity) {$/;"	f	typeref:typename:Dictionary *
DictPut	dict.c	/^void DictPut(GC * gc, Dictionary * dict, Value * key, Value * value) {$/;"	f	typeref:typename:void
DictReHash	dict.c	/^static void DictReHash(GC * gc, Dictionary * dict, uint32_t size) {$/;"	f	typeref:typename:void	file:
DictRemove	dict.c	/^Value DictRemove(GC * gc, Dictionary * dict, Value * key) {$/;"	f	typeref:typename:Value
Dictionary	datatypes.h	/^struct Dictionary {$/;"	s
Dictionary	datatypes.h	/^typedef struct Dictionary Dictionary;$/;"	t	typeref:struct:Dictionary
DictionaryIterator	datatypes.h	/^struct DictionaryIterator {$/;"	s
DictionaryIterator	datatypes.h	/^typedef struct DictionaryIterator DictionaryIterator;$/;"	t	typeref:struct:DictionaryIterator
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
EXPECTED_FUNCTION	vm.c	/^static const char EXPECTED_FUNCTION[] = "Expected function";$/;"	v	typeref:typename:const char[]	file:
FRAME_SIZE	datatypes.h	/^#define FRAME_SIZE /;"	d
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
FormOptions	compile.c	/^struct FormOptions {$/;"	s	file:
FormOptions	compile.c	/^typedef struct FormOptions FormOptions;$/;"	t	typeref:struct:FormOptions	file:
FormOptionsDefault	compile.c	/^static FormOptions FormOptionsDefault() {$/;"	f	typeref:typename:FormOptions	file:
FrameCallee	datatypes.h	/^#define FrameCallee(/;"	d
FrameEnv	datatypes.h	/^#define FrameEnv(/;"	d
FrameEnvValue	datatypes.h	/^#define FrameEnvValue(/;"	d
FrameMeta	datatypes.h	/^#define FrameMeta(/;"	d
FramePC	datatypes.h	/^#define FramePC(/;"	d
FramePCValue	datatypes.h	/^#define FramePCValue(/;"	d
FramePrevSize	datatypes.h	/^#define FramePrevSize(/;"	d
FrameReturn	datatypes.h	/^#define FrameReturn(/;"	d
FrameSize	datatypes.h	/^#define FrameSize(/;"	d
Func	datatypes.h	/^struct Func {$/;"	s
Func	datatypes.h	/^typedef struct Func Func;$/;"	t	typeref:struct:Func
FuncDef	datatypes.h	/^struct FuncDef {$/;"	s
FuncDef	datatypes.h	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef
FuncEnv	datatypes.h	/^struct FuncEnv {$/;"	s
FuncEnv	datatypes.h	/^typedef struct FuncEnv FuncEnv;$/;"	t	typeref:struct:FuncEnv
GC	datatypes.h	/^struct GC {$/;"	s
GC	datatypes.h	/^typedef struct GC GC;$/;"	t	typeref:struct:GC
GCAlloc	gc.c	/^void * GCAlloc(GC * gc, uint32_t size) {$/;"	f	typeref:typename:void *
GCClear	gc.c	/^void GCClear(GC * gc) {$/;"	f	typeref:typename:void
GCCollect	gc.h	/^#define GCCollect(/;"	d
GCHeader	gc.c	/^#define GCHeader(/;"	d	file:
GCInit	gc.c	/^void GCInit(GC * gc, uint32_t memoryInterval) {$/;"	f	typeref:typename:void
GCMark	gc.c	/^void GCMark(GC * gc, Value * x) {$/;"	f	typeref:typename:void
GCMarkFuncEnv	gc.c	/^static void GCMarkFuncEnv(GC * gc, FuncEnv * env) {$/;"	f	typeref:typename:void	file:
GCMarkMemory	gc.c	/^void GCMarkMemory(GC * gc, void * memory) {$/;"	f	typeref:typename:void
GCMaybeCollect	gc.h	/^#define GCMaybeCollect(/;"	d
GCMemoryHeader	gc.c	/^struct GCMemoryHeader {$/;"	s	file:
GCMemoryHeader	gc.c	/^typedef struct GCMemoryHeader GCMemoryHeader;$/;"	t	typeref:struct:GCMemoryHeader	file:
GCNeedsCollect	gc.h	/^#define GCNeedsCollect(/;"	d
GCPrepare	gc.c	/^static void * GCPrepare(GC * gc, char * rawBlock, uint32_t size) {$/;"	f	typeref:typename:void *	file:
GCSweep	gc.c	/^void GCSweep(GC * gc) {$/;"	f	typeref:typename:void
GCZalloc	gc.c	/^void * GCZalloc(GC * gc, uint32_t size) {$/;"	f	typeref:typename:void *
GC_H_N8L3U4KK	gc.h	/^#define GC_H_N8L3U4KK$/;"	d
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
GetSpecial	compile.c	/^static SpecialFormHelper GetSpecial(Array * form) {$/;"	f	typeref:typename:SpecialFormHelper	file:
GetUpValue	vm.c	/^static Value * GetUpValue(VM * vm, Func * fn, uint16_t level, uint16_t index) {$/;"	f	typeref:typename:Value *	file:
HEX	value.c	/^#define HEX(/;"	d	file:
HEX_CHARACTERS	value.c	/^static const char * HEX_CHARACTERS = "0123456789ABCDEF";$/;"	v	typeref:typename:const char *	file:
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
LoadCString	value.c	/^static uint8_t * LoadCString(GC * gc, const char * string, uint32_t len) {$/;"	f	typeref:typename:uint8_t *	file:
LoadConstant	vm.c	/^static Value * LoadConstant(VM * vm, Func * fn, uint16_t index) {$/;"	f	typeref:typename:Value *	file:
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
NO_UPVALUE	vm.c	/^static const char NO_UPVALUE[] = "Out of memory";$/;"	v	typeref:typename:const char[]	file:
Number	datatypes.h	/^typedef double Number;$/;"	t	typeref:typename:double
NumberToString	value.c	/^static uint8_t * NumberToString(GC * gc, Number x) {$/;"	f	typeref:typename:uint8_t *	file:
OBJECTS	Makefile	/^OBJECTS=$(patsubst %.c,%.o,$(SOURCES))$/;"	m
OOM	vm.c	/^static const char OOM[] = "Out of memory";$/;"	v	typeref:typename:const char[]	file:
OPCODES_H_EFPEYNZ0	opcodes.h	/^#define OPCODES_H_EFPEYNZ0$/;"	d
OpCode	opcodes.h	/^enum OpCode {$/;"	g
PARSER_ERROR	datatypes.h	/^#define PARSER_ERROR /;"	d
PARSER_FULL	datatypes.h	/^#define PARSER_FULL /;"	d
PARSER_PENDING	datatypes.h	/^#define PARSER_PENDING /;"	d
PARSE_ERROR	parse.h	/^#define PARSE_ERROR /;"	d
PARSE_H_ONYWMADW	parse.h	/^#define PARSE_H_ONYWMADW$/;"	d
PARSE_VALUE_PENDING	parse.h	/^#define PARSE_VALUE_PENDING /;"	d
PARSE_VALUE_READ	parse.h	/^#define PARSE_VALUE_READ /;"	d
PError	parse.c	/^#define PError(/;"	d	file:
PREFIX	Makefile	/^PREFIX=\/usr\/local$/;"	m
PTYPE_ARRAY	parse.c	/^    PTYPE_ARRAY,$/;"	e	enum:ParseType	file:
PTYPE_DICTIONARY	parse.c	/^    PTYPE_DICTIONARY,$/;"	e	enum:ParseType	file:
PTYPE_FORM	parse.c	/^    PTYPE_FORM,$/;"	e	enum:ParseType	file:
PTYPE_ROOT	parse.c	/^    PTYPE_ROOT,$/;"	e	enum:ParseType	file:
PTYPE_STRING	parse.c	/^    PTYPE_STRING,$/;"	e	enum:ParseType	file:
PTYPE_TOKEN	parse.c	/^    PTYPE_TOKEN$/;"	e	enum:ParseType	file:
ParseReadNumber	parse.c	/^static int ParseReadNumber(const uint8_t * string, const uint8_t * end, double * ret, int forceI/;"	f	typeref:typename:int	file:
ParseState	datatypes.h	/^typedef struct ParseState ParseState;$/;"	t	typeref:struct:ParseState
ParseState	parse.c	/^struct ParseState {$/;"	s	file:
ParseType	parse.c	/^typedef enum ParseType {$/;"	g	file:
ParseType	parse.c	/^} ParseType;$/;"	t	typeref:enum:ParseType	file:
Parser	datatypes.h	/^struct Parser {$/;"	s
Parser	datatypes.h	/^typedef struct Parser Parser;$/;"	t	typeref:struct:Parser
ParserArrayState	parse.c	/^static int ParserArrayState(Parser * p, uint8_t c) {$/;"	f	typeref:typename:int	file:
ParserBuildTokenBuffer	parse.c	/^static Value ParserBuildTokenBuffer(Parser * p, Buffer * buf) {$/;"	f	typeref:typename:Value	file:
ParserDictState	parse.c	/^static int ParserDictState(Parser * p, uint8_t c) {$/;"	f	typeref:typename:int	file:
ParserDispatchChar	parse.c	/^static int ParserDispatchChar(Parser * p, uint8_t c) {$/;"	f	typeref:typename:int	file:
ParserFormState	parse.c	/^static int ParserFormState(Parser * p, uint8_t c) {$/;"	f	typeref:typename:int	file:
ParserInit	parse.c	/^void ParserInit(Parser * p, VM * vm) {$/;"	f	typeref:typename:void
ParserMainState	parse.c	/^static int ParserMainState(Parser * p, uint8_t c) {$/;"	f	typeref:typename:int	file:
ParserParseCString	parse.c	/^int ParserParseCString(Parser * p, const char * string) {$/;"	f	typeref:typename:int
ParserPeek	parse.c	/^static ParseState * ParserPeek(Parser * p) {$/;"	f	typeref:typename:ParseState *	file:
ParserPop	parse.c	/^static ParseState * ParserPop(Parser * p) {$/;"	f	typeref:typename:ParseState *	file:
ParserPush	parse.c	/^static void ParserPush(Parser *p, ParseType type) {$/;"	f	typeref:typename:void	file:
ParserRootState	parse.c	/^static int ParserRootState(Parser * p, uint8_t c) {$/;"	f	typeref:typename:int	file:
ParserStringState	parse.c	/^static int ParserStringState(Parser * p, uint8_t c) {$/;"	f	typeref:typename:int	file:
ParserTokenState	parse.c	/^static int ParserTokenState(Parser * p, uint8_t c) {$/;"	f	typeref:typename:int	file:
ParserTopAppend	parse.c	/^static void ParserTopAppend(Parser * p, Value x) {$/;"	f	typeref:typename:void	file:
SOURCES	Makefile	/^SOURCES=main.c parse.c value.c vm.c dict.c array.c buffer.c gc.c compile.c$/;"	m
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
STRING_STATE_BASE	parse.c	/^                STRING_STATE_BASE,$/;"	e	enum:ParseState::__anon9bce43d1010a::__anon9bce43d10308::__anon9bce43d10403	file:
STRING_STATE_ESCAPE	parse.c	/^                STRING_STATE_ESCAPE,$/;"	e	enum:ParseState::__anon9bce43d1010a::__anon9bce43d10308::__anon9bce43d10403	file:
STRING_STATE_ESCAPE_HEX	parse.c	/^                STRING_STATE_ESCAPE_HEX$/;"	e	enum:ParseState::__anon9bce43d1010a::__anon9bce43d10308::__anon9bce43d10403	file:
STRING_STATE_ESCAPE_UNICODE	parse.c	/^                STRING_STATE_ESCAPE_UNICODE,$/;"	e	enum:ParseState::__anon9bce43d1010a::__anon9bce43d10308::__anon9bce43d10403	file:
Scope	compile.c	/^struct Scope {$/;"	s	file:
Scope	datatypes.h	/^typedef struct Scope Scope;$/;"	t	typeref:struct:Scope
ScopeSymbolResolve	compile.c	/^static int ScopeSymbolResolve(Scope * scope, Value x,$/;"	f	typeref:typename:int	file:
Slot	compile.c	/^struct Slot {$/;"	s	file:
Slot	compile.c	/^typedef struct Slot Slot;$/;"	t	typeref:struct:Slot	file:
SlotDefault	compile.c	/^static Slot SlotDefault() {$/;"	f	typeref:typename:Slot	file:
SlotTracker	compile.c	/^struct SlotTracker {$/;"	s	file:
SlotTracker	compile.c	/^typedef struct SlotTracker SlotTracker;$/;"	t	typeref:struct:SlotTracker	file:
SpecialFormHelper	compile.c	/^typedef Slot (*SpecialFormHelper) (Compiler * c, FormOptions opts, Array * form);$/;"	t	typeref:typename:Slot (*)(Compiler * c,FormOptions opts,Array * form)	file:
StringDescription	value.c	/^static uint8_t * StringDescription(GC * gc, const char * title, uint32_t titlelen, void * pointe/;"	f	typeref:typename:uint8_t *	file:
TARGET	Makefile	/^TARGET=interp$/;"	m
THREAD_STATUS_ALIVE	datatypes.h	/^#define THREAD_STATUS_ALIVE /;"	d
THREAD_STATUS_DEAD	datatypes.h	/^#define THREAD_STATUS_DEAD /;"	d
THREAD_STATUS_PENDING	datatypes.h	/^#define THREAD_STATUS_PENDING /;"	d
TYPE_ARRAY	datatypes.h	/^    TYPE_ARRAY,$/;"	e	enum:Type
TYPE_BOOLEAN	datatypes.h	/^    TYPE_BOOLEAN,$/;"	e	enum:Type
TYPE_BYTEBUFFER	datatypes.h	/^    TYPE_BYTEBUFFER,$/;"	e	enum:Type
TYPE_CFUNCTION	datatypes.h	/^    TYPE_CFUNCTION,$/;"	e	enum:Type
TYPE_DICTIONARY	datatypes.h	/^    TYPE_DICTIONARY,$/;"	e	enum:Type
TYPE_FORM	datatypes.h	/^    TYPE_FORM,$/;"	e	enum:Type
TYPE_FUNCDEF	datatypes.h	/^    TYPE_FUNCDEF,$/;"	e	enum:Type
TYPE_FUNCENV	datatypes.h	/^    TYPE_FUNCENV$/;"	e	enum:Type
TYPE_FUNCTION	datatypes.h	/^    TYPE_FUNCTION,$/;"	e	enum:Type
TYPE_NIL	datatypes.h	/^    TYPE_NIL = 0,$/;"	e	enum:Type
TYPE_NUMBER	datatypes.h	/^    TYPE_NUMBER,$/;"	e	enum:Type
TYPE_STRING	datatypes.h	/^    TYPE_STRING,$/;"	e	enum:Type
TYPE_SYMBOL	datatypes.h	/^    TYPE_SYMBOL,$/;"	e	enum:Type
TYPE_THREAD	datatypes.h	/^    TYPE_THREAD,$/;"	e	enum:Type
ThreadStack	datatypes.h	/^#define ThreadStack(/;"	d
Type	datatypes.h	/^typedef enum Type {$/;"	g
Type	datatypes.h	/^} Type;$/;"	t	typeref:enum:Type
UNEXPECTED_CLOSING_DELIM	parse.c	/^static const char UNEXPECTED_CLOSING_DELIM[] = "Unexpected closing delimiter";$/;"	v	typeref:typename:const char[]	file:
VALUE_H_1RJPQKFM	value.h	/^#define VALUE_H_1RJPQKFM$/;"	d
VM	datatypes.h	/^struct VM {$/;"	s
VM	datatypes.h	/^typedef struct VM VM;$/;"	t	typeref:struct:VM
VMArg	vm.c	/^#define VMArg(/;"	d	file:
VMAssert	vm.h	/^#define VMAssert(/;"	d
VMCallOp	vm.c	/^static void VMCallOp(VM * vm) {$/;"	f	typeref:typename:void	file:
VMCollect	vm.c	/^void VMCollect(VM * vm) {$/;"	f	typeref:typename:void
VMDeinit	vm.c	/^void VMDeinit(VM * vm) {$/;"	f	typeref:typename:void
VMError	vm.h	/^#define VMError(/;"	d
VMExit	vm.h	/^#define VMExit(/;"	d
VMHandleOutOfMemory	vm.c	/^static void VMHandleOutOfMemory(GC * gc) {$/;"	f	typeref:typename:void	file:
VMInit	vm.c	/^void VMInit(VM * vm) {$/;"	f	typeref:typename:void
VMLoad	vm.c	/^void VMLoad(VM * vm, Func * func) {$/;"	f	typeref:typename:void
VMMakeClosure	vm.c	/^static void VMMakeClosure(VM * vm, uint16_t ret, uint16_t literal) {$/;"	f	typeref:typename:void	file:
VMMark	vm.c	/^void VMMark(VM * vm) {$/;"	f	typeref:typename:void
VMMaybeCollect	vm.c	/^void VMMaybeCollect(VM * vm) {$/;"	f	typeref:typename:void
VMOpArg	vm.c	/^#define VMOpArg(/;"	d	file:
VMPushCallee	vm.c	/^static void VMPushCallee(VM * vm, uint32_t ret, uint32_t arity, Value * callee) {$/;"	f	typeref:typename:void	file:
VMResult	vm.h	/^#define VMResult(/;"	d
VMReturn	vm.c	/^static void VMReturn(VM * vm, Value ret) {$/;"	f	typeref:typename:void	file:
VMS_EXPECTED_NUMBER_LOP	vm.c	/^static const char VMS_EXPECTED_NUMBER_LOP[] = "Expected left operand to be number";$/;"	v	typeref:typename:const char[]	file:
VMS_EXPECTED_NUMBER_ROP	vm.c	/^static const char VMS_EXPECTED_NUMBER_ROP[] = "Expected right operand to be number";$/;"	v	typeref:typename:const char[]	file:
VMStart	vm.c	/^int VMStart(VM * vm) {$/;"	f	typeref:typename:int
VMTailCallOp	vm.c	/^static void VMTailCallOp(VM * vm) {$/;"	f	typeref:typename:void	file:
VMThreadPop	vm.c	/^static void VMThreadPop(VM * vm, Array * thread) {$/;"	f	typeref:typename:void	file:
VMThreadPush	vm.c	/^static void VMThreadPush(VM * vm, Array * thread, Value callee, uint32_t size) {$/;"	f	typeref:typename:void	file:
VMThreadSplitStack	vm.c	/^static void VMThreadSplitStack(VM * vm, Array * thread) {$/;"	f	typeref:typename:void	file:
VM_H_C4OZU8CQ	vm.h	/^#define VM_H_C4OZU8CQ$/;"	d
VM_OP_ADD	opcodes.h	/^    VM_OP_ADD = 0,    \/* 0x0000 *\/$/;"	e	enum:OpCode
VM_OP_ADM	opcodes.h	/^    VM_OP_ADM,        \/* 0x001c *\/$/;"	e	enum:OpCode
VM_OP_ARR	opcodes.h	/^    VM_OP_ARR,        \/* 0x0019 *\/$/;"	e	enum:OpCode
VM_OP_CAL	opcodes.h	/^    VM_OP_CAL,        \/* 0x000e *\/$/;"	e	enum:OpCode
VM_OP_CLN	opcodes.h	/^    VM_OP_CLN,        \/* 0x0015 *\/$/;"	e	enum:OpCode
VM_OP_CST	opcodes.h	/^    VM_OP_CST,        \/* 0x0011 *\/$/;"	e	enum:OpCode
VM_OP_DIC	opcodes.h	/^    VM_OP_DIC,        \/* 0x001a *\/$/;"	e	enum:OpCode
VM_OP_DIV	opcodes.h	/^    VM_OP_DIV,        \/* 0x0003 *\/$/;"	e	enum:OpCode
VM_OP_DVM	opcodes.h	/^    VM_OP_DVM,        \/* 0x001f *\/$/;"	e	enum:OpCode
VM_OP_EQL	opcodes.h	/^    VM_OP_EQL,        \/* 0x0016 *\/$/;"	e	enum:OpCode
VM_OP_F64	opcodes.h	/^    VM_OP_F64,        \/* 0x0013 *\/$/;"	e	enum:OpCode
VM_OP_FLS	opcodes.h	/^    VM_OP_FLS,        \/* 0x0007 *\/$/;"	e	enum:OpCode
VM_OP_I16	opcodes.h	/^    VM_OP_I16,        \/* 0x000a *\/$/;"	e	enum:OpCode
VM_OP_I32	opcodes.h	/^    VM_OP_I32,        \/* 0x0012 *\/$/;"	e	enum:OpCode
VM_OP_JIF	opcodes.h	/^    VM_OP_JIF,        \/* 0x000c *\/$/;"	e	enum:OpCode
VM_OP_JMP	opcodes.h	/^    VM_OP_JMP,        \/* 0x000d *\/$/;"	e	enum:OpCode
VM_OP_LD0	opcodes.h	/^    VM_OP_LD0,        \/* 0x0005 *\/$/;"	e	enum:OpCode
VM_OP_LD1	opcodes.h	/^    VM_OP_LD1,        \/* 0x0006 *\/$/;"	e	enum:OpCode
VM_OP_LTE	opcodes.h	/^    VM_OP_LTE,        \/* 0x0018 *\/$/;"	e	enum:OpCode
VM_OP_LTN	opcodes.h	/^    VM_OP_LTN,        \/* 0x0017 *\/$/;"	e	enum:OpCode
VM_OP_MOV	opcodes.h	/^    VM_OP_MOV,        \/* 0x0014 *\/$/;"	e	enum:OpCode
VM_OP_MUL	opcodes.h	/^    VM_OP_MUL,        \/* 0x0002 *\/$/;"	e	enum:OpCode
VM_OP_MUM	opcodes.h	/^    VM_OP_MUM,        \/* 0x001e *\/$/;"	e	enum:OpCode
VM_OP_NIL	opcodes.h	/^    VM_OP_NIL,        \/* 0x0009 *\/$/;"	e	enum:OpCode
VM_OP_NOT	opcodes.h	/^    VM_OP_NOT,        \/* 0x0004 *\/$/;"	e	enum:OpCode
VM_OP_RET	opcodes.h	/^    VM_OP_RET,        \/* 0x000f *\/$/;"	e	enum:OpCode
VM_OP_RTN	opcodes.h	/^    VM_OP_RTN         \/* 0x0020 *\/$/;"	e	enum:OpCode
VM_OP_SBM	opcodes.h	/^    VM_OP_SBM,        \/* 0x001d *\/$/;"	e	enum:OpCode
VM_OP_SUB	opcodes.h	/^    VM_OP_SUB,        \/* 0x0001 *\/$/;"	e	enum:OpCode
VM_OP_SUV	opcodes.h	/^    VM_OP_SUV,        \/* 0x0010 *\/$/;"	e	enum:OpCode
VM_OP_TCL	opcodes.h	/^    VM_OP_TCL,        \/* 0x001b *\/$/;"	e	enum:OpCode
VM_OP_TRU	opcodes.h	/^    VM_OP_TRU,        \/* 0x0008 *\/$/;"	e	enum:OpCode
VM_OP_UPV	opcodes.h	/^    VM_OP_UPV,        \/* 0x000b *\/$/;"	e	enum:OpCode
VSTRING_H_TFCSVBEE	vstring.h	/^#define VSTRING_H_TFCSVBEE$/;"	d
VStringHash	vstring.h	/^#define VStringHash(/;"	d
VStringRaw	vstring.h	/^#define VStringRaw(/;"	d
VStringSize	vstring.h	/^#define VStringSize(/;"	d
Value	datatypes.h	/^struct Value {$/;"	s
Value	datatypes.h	/^typedef struct Value Value;$/;"	t	typeref:struct:Value
ValueCompare	value.c	/^int ValueCompare(Value * x, Value * y) {$/;"	f	typeref:typename:int
ValueData	datatypes.h	/^typedef union ValueData ValueData;$/;"	t	typeref:union:ValueData
ValueData	datatypes.h	/^union ValueData {$/;"	u
ValueEqual	value.c	/^int ValueEqual(Value * x, Value * y) {$/;"	f	typeref:typename:int
ValueHash	value.c	/^uint32_t ValueHash(Value * x) {$/;"	f	typeref:typename:uint32_t
ValueLoadCString	value.c	/^Value ValueLoadCString(GC * gc, const char * string) {$/;"	f	typeref:typename:Value
ValuePrint	value.c	/^void ValuePrint(Value * x, uint32_t indent) {$/;"	f	typeref:typename:void
ValueToString	value.c	/^uint8_t * ValueToString(GC * gc, Value * x) {$/;"	f	typeref:typename:uint8_t *
__anon69403613010a	value.c	/^    union {$/;"	u	function:StringDescription	file:
__anon69403613020a	value.c	/^                union {$/;"	u	function:ValueHash	file:
__anon9bce43d1010a	parse.c	/^    union {$/;"	u	struct:ParseState	file:
__anon9bce43d10208	parse.c	/^        struct {$/;"	s	union:ParseState::__anon9bce43d1010a	file:
__anon9bce43d10308	parse.c	/^        struct {$/;"	s	union:ParseState::__anon9bce43d1010a	file:
__anon9bce43d10403	parse.c	/^            enum {$/;"	g	struct:ParseState::__anon9bce43d1010a::__anon9bce43d10308	file:
all	Makefile	/^all: $(TARGET)$/;"	t
arity	datatypes.h	/^    uint32_t arity;$/;"	m	struct:FuncDef	typeref:typename:uint32_t
array	datatypes.h	/^    Array * array;$/;"	m	union:ValueData	typeref:typename:Array *
array	parse.c	/^        Array * array;$/;"	m	union:ParseState::__anon9bce43d1010a	typeref:typename:Array *	file:
base	datatypes.h	/^    Value * base;$/;"	m	struct:VM	typeref:typename:Value *
black	datatypes.h	/^    uint32_t black : 1;$/;"	m	struct:GC	typeref:typename:uint32_t:1
blocks	datatypes.h	/^    void * blocks;$/;"	m	struct:GC	typeref:typename:void *
boolean	datatypes.h	/^    Boolean boolean;$/;"	m	union:ValueData	typeref:typename:Boolean
bucket	datatypes.h	/^    DictBucket * bucket;$/;"	m	struct:DictionaryIterator	typeref:typename:DictBucket *
buckets	datatypes.h	/^    DictBucket ** buckets;$/;"	m	struct:Dictionary	typeref:typename:DictBucket **
buf	parse.c	/^    } buf;$/;"	m	struct:ParseState	typeref:union:ParseState::__anon9bce43d1010a	file:
buffer	datatypes.h	/^    Buffer * buffer;$/;"	m	union:ValueData	typeref:typename:Buffer *
buffer	datatypes.h	/^    Buffer buffer;$/;"	m	struct:Compiler	typeref:typename:Buffer
buffer	parse.c	/^            Buffer * buffer;$/;"	m	struct:ParseState::__anon9bce43d1010a::__anon9bce43d10308	typeref:typename:Buffer *	file:
byteCode	datatypes.h	/^    uint16_t * byteCode;$/;"	m	struct:FuncDef	typeref:typename:uint16_t *
byteCodeLen	datatypes.h	/^    uint32_t byteCodeLen;$/;"	m	struct:FuncDef	typeref:typename:uint32_t
bytes	value.c	/^        uint8_t bytes[sizeof(void *)];$/;"	m	union:StringDescription::__anon69403613010a	typeref:typename:uint8_t[]	file:
canChoose	compile.c	/^    uint16_t canChoose : 1;$/;"	m	struct:FormOptions	typeref:typename:uint16_t:1	file:
canDrop	compile.c	/^    uint16_t canDrop : 1;$/;"	m	struct:FormOptions	typeref:typename:uint16_t:1	file:
cap	datatypes.h	/^    uint32_t cap;$/;"	m	struct:Parser	typeref:typename:uint32_t
capacity	compile.c	/^    uint32_t capacity;$/;"	m	struct:SlotTracker	typeref:typename:uint32_t	file:
capacity	datatypes.h	/^    uint32_t capacity;$/;"	m	struct:Array	typeref:typename:uint32_t
capacity	datatypes.h	/^    uint32_t capacity;$/;"	m	struct:Buffer	typeref:typename:uint32_t
capacity	datatypes.h	/^    uint32_t capacity;$/;"	m	struct:Dictionary	typeref:typename:uint32_t
cfunction	datatypes.h	/^    CFunction cfunction;$/;"	m	union:ValueData	typeref:typename:CFunction
checkStrConst	parse.c	/^static int checkStrConst(const char * ref, const uint8_t * start, const uint8_t * end) {$/;"	f	typeref:typename:int	file:
clean	Makefile	/^clean:$/;"	t
color	gc.c	/^    uint32_t color;$/;"	m	struct:GCMemoryHeader	typeref:typename:uint32_t	file:
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
count	compile.c	/^    uint32_t count;$/;"	m	struct:SlotTracker	typeref:typename:uint32_t	file:
count	datatypes.h	/^    uint32_t count;$/;"	m	struct:Array	typeref:typename:uint32_t
count	datatypes.h	/^    uint32_t count;$/;"	m	struct:Buffer	typeref:typename:uint32_t
count	datatypes.h	/^    uint32_t count;$/;"	m	struct:Dictionary	typeref:typename:uint32_t
count	datatypes.h	/^    uint32_t count;$/;"	m	struct:Parser	typeref:typename:uint32_t
data	datatypes.h	/^    ParseState * data;$/;"	m	struct:Parser	typeref:typename:ParseState *
data	datatypes.h	/^    Value * data;$/;"	m	struct:Array	typeref:typename:Value *
data	datatypes.h	/^    ValueData data;$/;"	m	struct:Value	typeref:typename:ValueData
data	datatypes.h	/^    uint8_t * data;$/;"	m	struct:Buffer	typeref:typename:uint8_t *
data	datatypes.h	/^} data;$/;"	v	typeref:union:ValueData
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
debug	Makefile	/^debug: $(TARGET)$/;"	t
debugRepl	main.c	/^void debugRepl() {$/;"	f	typeref:typename:void
def	datatypes.h	/^    FuncDef * def;$/;"	m	struct:Func	typeref:typename:FuncDef *
dict	datatypes.h	/^    Dictionary * dict;$/;"	m	struct:DictionaryIterator	typeref:typename:Dictionary *
dict	datatypes.h	/^    Dictionary * dict;$/;"	m	union:ValueData	typeref:typename:Dictionary *
dict	parse.c	/^            Dictionary * dict;$/;"	m	struct:ParseState::__anon9bce43d1010a::__anon9bce43d10208	typeref:typename:Dictionary *	file:
dictState	parse.c	/^        } dictState;$/;"	m	union:ParseState::__anon9bce43d1010a	typeref:struct:ParseState::__anon9bce43d1010a::__anon9bce43d10208	file:
djb2	value.c	/^uint32_t djb2(const uint8_t * str) {$/;"	f	typeref:typename:uint32_t
env	datatypes.h	/^    Array env;$/;"	m	struct:Compiler	typeref:typename:Array
env	datatypes.h	/^    FuncEnv * env;$/;"	m	struct:Func	typeref:typename:FuncEnv *
error	datatypes.h	/^    const char * error;$/;"	m	struct:Compiler	typeref:typename:const char *
error	datatypes.h	/^    const char * error;$/;"	m	struct:Parser	typeref:typename:const char *
error	datatypes.h	/^    const char * error;$/;"	m	struct:VM	typeref:typename:const char *
exp10	parse.c	/^static double exp10(int power) {$/;"	f	typeref:typename:double	file:
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
freeHeap	compile.c	/^    uint16_t * freeHeap;$/;"	m	struct:Scope	typeref:typename:uint16_t *	file:
func	datatypes.h	/^    Func * func;$/;"	m	union:ValueData	typeref:typename:Func *
funcdef	datatypes.h	/^    FuncDef * funcdef;$/;"	m	union:ValueData	typeref:typename:FuncDef *
funcenv	datatypes.h	/^    FuncEnv * funcenv;$/;"	m	union:ValueData	typeref:typename:FuncEnv *
gc	datatypes.h	/^    GC gc;$/;"	m	struct:VM	typeref:typename:GC
handleOutOfMemory	datatypes.h	/^    void (*handleOutOfMemory)(GC * gc);$/;"	m	struct:GC	typeref:typename:void (*)(GC * gc)
hash	value.c	/^                    uint32_t hash;$/;"	m	union:ValueHash::__anon69403613020a	typeref:typename:uint32_t	file:
heapCapacity	compile.c	/^    uint32_t heapCapacity;$/;"	m	struct:Scope	typeref:typename:uint32_t	file:
heapSize	compile.c	/^    uint32_t heapSize;$/;"	m	struct:Scope	typeref:typename:uint32_t	file:
index	compile.c	/^    uint16_t index;$/;"	m	struct:Slot	typeref:typename:uint16_t	file:
index	datatypes.h	/^    uint32_t index;$/;"	m	struct:DictionaryIterator	typeref:typename:uint32_t
index	datatypes.h	/^    uint32_t index;$/;"	m	struct:Parser	typeref:typename:uint32_t
install	Makefile	/^install: $(TARGET)$/;"	t
isDud	compile.c	/^    uint16_t isDud : 1;$/;"	m	struct:Slot	typeref:typename:uint16_t:1	file:
isSymbolChar	parse.c	/^static int isSymbolChar(uint8_t c) {$/;"	f	typeref:typename:int	file:
isTail	compile.c	/^    uint16_t isTail : 1;$/;"	m	struct:FormOptions	typeref:typename:uint16_t:1	file:
isTemp	compile.c	/^    uint16_t isTemp : 1;$/;"	m	struct:Slot	typeref:typename:uint16_t:1	file:
isWhitespace	parse.c	/^static int isWhitespace(uint8_t c) {$/;"	f	typeref:typename:int	file:
jump	datatypes.h	/^    jmp_buf jump;$/;"	m	struct:VM	typeref:typename:jmp_buf
key	datatypes.h	/^    Value key;$/;"	m	struct:DictBucket	typeref:typename:Value
key	parse.c	/^            Value key;$/;"	m	struct:ParseState::__anon9bce43d1010a::__anon9bce43d10208	typeref:typename:Value	file:
keyFound	parse.c	/^            int keyFound;$/;"	m	struct:ParseState::__anon9bce43d1010a::__anon9bce43d10208	typeref:typename:int	file:
literals	compile.c	/^    Dictionary * literals;$/;"	m	struct:Scope	typeref:typename:Dictionary *	file:
literals	datatypes.h	/^    Value * literals; \/* Contains strings, FuncDefs, etc. *\/$/;"	m	struct:FuncDef	typeref:typename:Value *
literalsArray	compile.c	/^    Array * literalsArray;$/;"	m	struct:Scope	typeref:typename:Array *	file:
literalsLen	datatypes.h	/^    uint32_t literalsLen;$/;"	m	struct:FuncDef	typeref:typename:uint32_t
locals	compile.c	/^    Dictionary locals;$/;"	m	struct:Scope	typeref:typename:Dictionary	file:
locals	datatypes.h	/^    uint32_t locals;$/;"	m	struct:FuncDef	typeref:typename:uint32_t
main	main.c	/^int main() {$/;"	f	typeref:typename:int
memoryInterval	datatypes.h	/^    uint32_t memoryInterval;$/;"	m	struct:GC	typeref:typename:uint32_t
next	datatypes.h	/^    DictBucket * next;$/;"	m	struct:DictBucket	typeref:typename:DictBucket *
next	gc.c	/^    GCMemoryHeader * next;$/;"	m	struct:GCMemoryHeader	typeref:typename:GCMemoryHeader *	file:
nextCollection	datatypes.h	/^    uint32_t nextCollection;$/;"	m	struct:GC	typeref:typename:uint32_t
nextLocal	compile.c	/^    uint16_t nextLocal;$/;"	m	struct:Scope	typeref:typename:uint16_t	file:
nextScope	compile.c	/^    Scope * nextScope;$/;"	m	struct:Scope	typeref:typename:Scope *	file:
number	datatypes.h	/^    Number number;$/;"	m	union:ValueData	typeref:typename:Number
number	value.c	/^                    Number number;$/;"	m	union:ValueHash::__anon69403613020a	typeref:typename:Number	file:
onError	datatypes.h	/^    jmp_buf onError;$/;"	m	struct:Compiler	typeref:typename:jmp_buf
p	value.c	/^        void * p;$/;"	m	union:StringDescription::__anon69403613010a	typeref:typename:void *	file:
parent	datatypes.h	/^    Func * parent;$/;"	m	struct:Func	typeref:typename:Func *
pc	datatypes.h	/^    uint16_t * pc;$/;"	m	struct:VM	typeref:typename:uint16_t *
pointer	datatypes.h	/^    void * pointer;$/;"	m	union:ValueData	typeref:typename:void *
previousScope	compile.c	/^    Scope * previousScope;$/;"	m	struct:Scope	typeref:typename:Scope *	file:
root	datatypes.h	/^    Scope * root;$/;"	m	struct:Compiler	typeref:typename:Scope *
run	Makefile	/^run: $(TARGET)$/;"	t
slots	compile.c	/^    Slot * slots;$/;"	m	struct:SlotTracker	typeref:typename:Slot *	file:
stackOffset	datatypes.h	/^    uint32_t stackOffset; \/* Used as environment size when off stack *\/$/;"	m	struct:FuncEnv	typeref:typename:uint32_t
state	parse.c	/^            } state;$/;"	m	struct:ParseState::__anon9bce43d1010a::__anon9bce43d10308	typeref:enum:ParseState::__anon9bce43d1010a::__anon9bce43d10308::__anon9bce43d10403	file:
status	datatypes.h	/^    uint32_t status;$/;"	m	struct:Parser	typeref:typename:uint32_t
string	datatypes.h	/^    uint8_t * string;$/;"	m	union:ValueData	typeref:typename:uint8_t *
string	parse.c	/^        } string;$/;"	m	union:ParseState::__anon9bce43d1010a	typeref:struct:ParseState::__anon9bce43d1010a::__anon9bce43d10308	file:
tail	datatypes.h	/^    Scope * tail;$/;"	m	struct:Compiler	typeref:typename:Scope *
target	compile.c	/^    uint16_t target;$/;"	m	struct:FormOptions	typeref:typename:uint16_t	file:
tempRoot	datatypes.h	/^    Value tempRoot; \/* Temporary GC root *\/$/;"	m	struct:VM	typeref:typename:Value
thread	datatypes.h	/^    Array * thread; \/* When nil, index the local values *\/$/;"	m	struct:FuncEnv	typeref:typename:Array *
thread	datatypes.h	/^    Array * thread;$/;"	m	struct:VM	typeref:typename:Array *
truthy	vm.c	/^static int truthy(Value * v) {$/;"	f	typeref:typename:int	file:
type	datatypes.h	/^    Type type;$/;"	m	struct:Value	typeref:typename:Type
type	parse.c	/^    ParseType type;$/;"	m	struct:ParseState	typeref:typename:ParseType	file:
u16	datatypes.h	/^    uint16_t u16[4];$/;"	m	union:ValueData	typeref:typename:uint16_t[4]
u8	datatypes.h	/^    uint8_t u8[8];$/;"	m	union:ValueData	typeref:typename:uint8_t[8]
user	datatypes.h	/^    void * user;$/;"	m	struct:GC	typeref:typename:void *
value	datatypes.h	/^    Value value;$/;"	m	struct:DictBucket	typeref:typename:Value
value	datatypes.h	/^    Value value;$/;"	m	struct:Parser	typeref:typename:Value
values	datatypes.h	/^    Value * values;$/;"	m	struct:FuncEnv	typeref:typename:Value *
vm	datatypes.h	/^    VM * vm;$/;"	m	struct:Compiler	typeref:typename:VM *
vm	datatypes.h	/^    VM * vm;$/;"	m	struct:Parser	typeref:typename:VM *
